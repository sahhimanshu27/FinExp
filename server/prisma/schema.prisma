// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id        String      @id @default(cuid())
    email     String      @unique
    name      String
    passwordHash String     @map("password_hash")
    createdAt DateTime    @default(now()) @map("created_at")
    updatedAt DateTime    @updatedAt @map("updated_at")

    // Relations
    transactions Transaction[]
    categories   Category[]
    budgets      Budget[]

    @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String?   @default("#3B82F6")
  icon        String?
  isDefault   Boolean   @default(false) @map("is_default")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  userId      String?   @map("user_id")
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets     Budget[]
  
  @@map("categories")
}

model Transaction {
  id          String      @id @default(cuid())
  amount      Decimal     @db.Decimal(10, 2)
  type        TransactionType
  description String?
  date        DateTime
  notes       String?
  attachmentUrl String?   @map("attachment_url")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  // Relations
  userId      String      @map("user_id")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String      @map("category_id")
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  
  @@map("transactions")
}

model Budget {
  id          String    @id @default(cuid())
  amount      Decimal   @db.Decimal(10, 2)
  period      BudgetPeriod @default(MONTHLY)
  startDate   DateTime  @map("start_date")
  endDate     DateTime  @map("end_date")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String    @map("category_id")
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@map("budgets")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  YEARLY
}